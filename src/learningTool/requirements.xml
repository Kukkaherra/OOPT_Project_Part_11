<tree>
	<composite>
		<requirement>I need to create objects</requirement>
		<composite>
			<requirement>I need only one instance of a class</requirement>
			<leaf>
					<pattern>Singleton</pattern>
			</leaf>
		</composite>
		<composite>
			<requirement>I need to create a family of related objects</requirement>
			<composite>
				<requirement>I need subclasses to instantiate the objects</requirement>
				<leaf>
					<pattern>Factory Method</pattern>
				</leaf>
			</composite>
			<composite>
				<requirement>I need to delegate object instantiation to another object</requirement>
				<leaf>
					<pattern>Abstract Factory</pattern>
				</leaf>
			</composite>
		</composite>
	</composite>

	<composite>
		<requirement>I need to compose objects into larger structures</requirement>
		<composite>
			<requirement>I need to extend a class without modifying it</requirement>
			<leaf>
					<pattern>Decorator</pattern>
			</leaf>
		</composite>
		<composite>
			<requirement>I need to make an interface fit a class</requirement>
			<leaf>
					<pattern>Adapter</pattern>
			</leaf>
		</composite>
		<composite>
			<requirement>I need to compose multiple classes into into one</requirement>
			<leaf>
					<pattern>Facade</pattern>
			</leaf>
		</composite>
		<composite>
			<requirement>I need to build a tree-like structure</requirement>
			<leaf>
					<pattern>Composite</pattern>
			</leaf>
		</composite>
		<composite>
			<requirement>I need to control access to a class</requirement>
			<leaf>
					<pattern>Proxy</pattern>
			</leaf>
		</composite>
	</composite>

	<composite>
		<requirement>I need to dictate behaviour between objects</requirement>
		<composite>
			<requirement>I need to update multiple classes when a change happens</requirement>
			<leaf>
				<pattern>Observer</pattern>
			</leaf>
		</composite>
		<composite>
			<requirement>I need to iterate over different types of collections</requirement>
			<leaf>
				<pattern>Iterator</pattern>
			</leaf>
		</composite>
		<composite>
			<requirement>I need to change the behaviour of a class depending on the internal state</requirement>
			<leaf>
				<pattern>State</pattern>
			</leaf>
		</composite>
		<composite>
			<requirement>I need to control method calls of an object</requirement>
			<leaf>
				<pattern>Command</pattern>
			</leaf>
		</composite>
		<composite>
			<requirement>I need to create a common template</requirement>
				<composite>
					<requirement>I need to be able to interchange algorithms</requirement>
					<leaf>
						<pattern>Strategy</pattern>
					</leaf>
				</composite>
				<composite>
					<requirement>I need to be able to modify an algorithm</requirement>
					<leaf>
						<pattern>Template Method</pattern>
					</leaf>
				</composite>
		</composite>
	</composite>

	<composite>
		<requirement>I need to combine multiple patterns</requirement>
		<leaf>
			<pattern>Compound</pattern>
		</leaf>
	</composite>
</tree>