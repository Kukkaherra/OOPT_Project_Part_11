The point of the Singleton Pattern is taking a class and letting it manage a single instance of itself, and in the same time it prevents any other class from creating a new instance on its own. Thus, to get an instance one must go through the class itself. Singleton also provides a global point of access to the instance. Whenever an instance is needed, the class is queried and and a single instance is returned. Because of the Singleton Patterns simplicity, it can be created in a "lazy" manner, which is beneficial in resource intensive objects. Consider the president of Finland being a Singleton. After the election of the president, they serve in the  limits of the term of office and there can only be one active president. Regardless of the person's identity the title of president is a global point of access that identifies the person. 

Abstract Factory can use Singleton in its implementation. In addition, Facade objects are usually Singletons, since only one Facade object is required. Singletons provide an advantage over global variables by knowing the absolute number of instances. 
