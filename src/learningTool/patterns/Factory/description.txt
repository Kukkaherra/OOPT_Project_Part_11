In the Factory Method Pattern we have two different types of classes: the creator classes and the product classes. The creator classes include an abstract creator, which defines an abstract factory method, and the subclasses, which are the “factory method”. The factory method produces the products. The product classes are concrete classes or products which the factories have produced/created, but they are also inherited from an abstract class.

For example, we could have a pizza store, this is our abstract creator, from which our concrete factories, or “factory methods” are created. We can have multiple factories, but for this example let’s think of them as “Finnish Pizza Store” and “Italian Pizza Store”. These factories or stores create our products, in this case: Pizza. Pizza is our abstract product class, from which concrete products such as “Finnish Cheese Pizza” or “Italian Pepperoni Pizza” are inherited from.

The key point of the Factory Method Pattern is that it gives us a way to encapsulate the instantiations of concrete types. We have an abstract creator which gives us a method (the factory method) for creating objects, we have the subclasses which implement the factory method and actually create products, and our products have an abstract class which defines the properties of the concrete products. The creator class does not have knowledge of the actual products that will be created, that is decided by choosing which subclass or factory is going to be used. The creator class however does contain the implementation for methods to manipulate the products, but not the factory method itself.
